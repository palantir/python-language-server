# based on https://docs.github.com/en/actions/guides/deploying-to-amazon-elastic-container-service
name: dev-deploy

permissions:
  id-token: write # required to use OIDC authentication
  contents: read # required to checkout the code from the repo
  pull-requests: read

on:
  push:
    branches:
      - develop

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: py-lang-server-dev
  ECS_SERVICE: py-lang-server-dev
  ECS_CLUSTER: dev
  ECS_TASK_DEFINITION: aws/ecr/pyls-dev.task.json
  CONTAINER_NAME: py-lang-server

defaults:
  run:
    shell: bash

jobs:

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: pyls

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::937976602373:role/github-actions-role-dev
          role-duration-seconds: 900
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build --build-arg github_token=${{ secrets.CI_TOKEN }} . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true